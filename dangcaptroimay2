repeat wait() until game.Players
repeat wait() until game.Players.LocalPlayer
repeat wait() until game.ReplicatedStorage
repeat wait() until game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
repeat wait() until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Main")
repeat wait() until game:GetService("Players").LocalPlayer.PlayerGui.Main.Right
repeat wait() until game:GetService("Workspace"):FindFirstChild("__MAP")
local Client = require(game.ReplicatedStorage.Library.Client)
local plr = game.Players.LocalPlayer
local Library = require(game:GetService("ReplicatedStorage").Library)
local v1 = require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library"))
local originalPlay = Library.Audio.Play
Library.Audio.Play = function(...) 
    if checkcaller() then
        local audioId, parent, pitch, volume, maxDistance, group, looped, timePosition = unpack({ ... })
        if type(audioId) == "table" then
            audioId = audioId[Random.new():NextInteger(1, #audioId)]
        end
        if not parent then
            warn("Parent cannot be nil", debug.traceback())
            return nil
        end
        if audioId == 0 then return nil end
        
        if type(audioId) == "number" or not string.find(audioId, "rbxassetid://", 1, true) then
            audioId = "rbxassetid://" .. audioId
        end
        if pitch and type(pitch) == "table" then
            pitch = Random.new():NextNumber(unpack(pitch))
        end
        if volume and type(volume) == "table" then
            volume = Random.new():NextNumber(unpack(volume))
        end
        if group then
            local soundGroup = game.SoundService:FindFirstChild(group) or nil
        else
            soundGroup = nil
        end
        if timePosition == nil then
            timePosition = 0
        else
            timePosition = timePosition
        end
        local isGargabe = false
        if not pcall(function() local _ = parent.Parent end) then
            local newParent = parent
            pcall(function()
                newParent = CFrame.new(newParent)
            end)
            parent = Instance.new("Part")
            parent.Anchored = true
            parent.CanCollide = false
            parent.CFrame = newParent
            parent.Size = Vector3.new()
            parent.Transparency = 1
            parent.Parent = workspace:WaitForChild("__DEBRIS")
            isGargabe = true
        end
        local sound = Instance.new("Sound")
        sound.SoundId = audioId
        sound.Name = "sound-" .. audioId
        sound.Pitch = pitch and 1
        sound.Volume = volume and 0.5
        sound.SoundGroup = soundGroup
        sound.Looped = looped and false
        sound.MaxDistance = maxDistance and 100
        sound.TimePosition = timePosition
        sound.RollOffMode = Enum.RollOffMode.Linear
        sound.Parent = parent
        if not require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client")).Settings.SoundsEnabled then
            sound:SetAttribute("CachedVolume", sound.Volume)
            sound.Volume = 0
        end
        sound:Play()
        getfenv(originalPlay).AddToGarbageCollection(sound, isGargabe)
        return sound
    end
    return originalPlay(...)
end

hookfunction(debug.getupvalue(Client.Network.Fire,1),function() return true end)
hookfunction(debug.getupvalue(Client.Network.Invoke,1),function() return true end)
hookfunction(debug.getupvalue(Library.Network.Invoke, 1), function() return true end)
hookfunction(debug.getupvalue(Library.Network.Fire, 1), function() return true end)
v1.WorldCmds.CanDoAction = function() return true end
local hihi = getsenv(game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs.Teleport)
local Save = v1.Save.Get
local Commas = v1.Functions.Commas

function teleportto(texta)
    local v17 = v1.Directory.Areas[texta]
    if v1.WorldCmds.Get() ~= v17.world then
        print(hihi.Teleport(texta,true))
    else
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(6970.59619140625, -156.029541015625, 4101.08740234375)
    end
end

function teleportmain(texta, cframe)
    local v17 = v1.Directory.Areas[texta]
    if v1.WorldCmds.Get() ~= v17.world then
        print(hihi.Teleport(texta,true))
    end
end

function getroll(a,b)
    Client.Network.Invoke("Buy Egg", 'Barn Doodle Egg', a, b)
end

if getgenv().config.no_animation then
    for i,v in pairs(getgc(true)) do
        if (typeof(v) == 'table' and rawget(v, 'OpenEgg')) then
            v.OpenEgg = function()
                return
            end
        end
    end
end

function getboost()
    local v48 = v1.Save.Get();
    for i,v in pairs(v48.BoostsInventory) do
        if tonumber(v) ~= 0 and table.find(boost,i) then
            Client.Network.Fire("Activate Boost",i)
        end
    end
end

function getahihi()
    for i = 1 , 12 do
        Client.Network.Invoke("Redeem Free Gift", i)
    end
end

function main()
    if getgenv().statusdc == false then
        teleportto('Doodle Shop')
        if getgenv().config.egg == 1 then
            getroll(false, false)
        elseif getgenv().config.egg == 3 then
            getroll(true, false)
        else
            getroll(true, true)
        end
    end
end

function ahih1i(num)
    if num == 0 then
        return
    end
    local v48 = v1.Save.Get()
    local petmain = {}
    local petblacklist = {}
    local rslt = {}
    for i,v in pairs(v48.Pets) do 
        if not table.find(petblacklist , v48.Pets[i]["uid"]) then
            local checkne = v1.Directory.Pets[v48.Pets[i]["id"]]
            if checkne.rarity ~= "Event" then
                table.insert(petmain, {tonumber(v48.Pets[i]["s"]), v48.Pets[i]["uid"]})
            end
        end
    end

    for i =1 , num do 
        local index = 0
        local maxmath = -math.huge
        for j = 1 , #petmain do
            if maxmath < petmain[j][1] then
                maxmath = petmain[j][1]
                jack5triu = petmain[j][2]
                index = j
            end
        end
        table.insert(rslt , jack5triu)
        table.remove(petmain , index)
    end
    return rslt
end
getgenv().statusdc = false
function getpetdc()
    local main = v1.Save.Get()
    local getpetqueue = main.DaycareQueue
    local getdata = {}
    if #getpetqueue == 0 then
        getgenv().statusdc= true
        if not game:GetService("Workspace")["__MAP"].Interactive:FindFirstChild("Daycare") then
            teleportmain("Spawn")
        end
        wait(2)
        plr.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["__MAP"].Interactive.Daycare.Pad.CFrame
		wait(2)
		Client.Network.Invoke("Daycare: Enroll", ahih1i(10))
        return
    else
        getgenv().statusdc = true
        for i,v in pairs(getpetqueue) do
			local gettimedc = v1.Shared.DaycareComputeRemainingTime(main, getpetqueue[i])
			if gettimedc <= 2 then
				table.insert(getdata,getpetqueue[i]["Pet"]["uid"])
			end
		end
        if #getdata == #getpetqueue then
            if not game:GetService("Workspace")["__MAP"].Interactive:FindFirstChild("Daycare") then
				teleportmain("Spawn")
			end
            plr.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["__MAP"].Interactive.Daycare.Pad.CFrame
            wait(2)
            Client.Network.Invoke("Daycare: Claim", nil)
            wait(2)
        else
            getgenv().statusdc = false
        end
        return
    end
    getgenv().statusdc = false
end

function lootbag()
    for i,v in pairs(game:GetService("Workspace")["__THINGS"].Lootbags:GetChildren()) do
        getgenv().cac = true
        v.CanCollide = false
        v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,0,0)
    end
    if #game:GetService("Workspace")["__THINGS"].Lootbags:GetChildren() < 1 and #workspace.__THINGS.Orbs:GetChildren() < 1 then
        getgenv().cac = false
    end
end

spawn(function()
    while true do wait()
        pcall(lootbag)
    end
end)

spawn(function()
    while getgenv().config.daycare do wait()
        local a,b = pcall(getpetdc)
        print(a,b)
    end
end)

spawn(function()
    while getgenv().config.use_luck do wait()
        pcall(getboost)
    end
end)

spawn(function()
    while getgenv().config.claim_daily do wait()
        pcall(getahihi)
    end
end)

while true do task.wait()
    pcall(main)
end
